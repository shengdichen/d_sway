# these serve as OPTIONs (set in config) or COMMANDs (assigned to keybind)


# common variables {{{
#   Sets variable $name to value. You can use the new variable in the arguments
#   of future commands. When the variable is used, it can be escaped with an
#   additional $ (ie $$name) to have the replacement happen at run time instead
#   of when reading the config. However, it does not always make sense for the
#   variable to be replaced at run time since some arguments do need to be
#   known at config time.
#       set $<name> <value>
#
# set the global modifier key to windows key
set {
    $mod_win Mod4
    $mod Mod4

    $mod_alt Mod1
}


# the terminal emulators
set {
    # the default terminal emulator
    $term_alacritty alacritty
    $term_foot foot

    # start the terminal |kitty| using customized startup script
    $term_kitty ~/.config/kitty/startup.sh

    $term_termite termite
}

# use kitty
#   bindsym \
#       $mod+Return \
#   exec --no-startup-id $term_kitty

# use alacritty
bindsym $mod+Return \

    exec --no-startup-id $term_foot


# }}}


# GUIDE {{{
# GUIDE: bindings {{{
#   Binds key combo to execute the sway command command when pressed. You may
#   use XKB key names here (xev(1) is a good tool for discovering these). With
#   the flag --release, the command is executed when the key combo is released.
#   If input-device is given, the binding will only be executed for that input
#   device and will be executed instead of any binding that is generic to all
#   devices. If a group number is given, then the binding will only be
#   available for that group. By default, if you overwrite a binding, swaynag
#   will give you a warning. To silence this, use the --no-warn flag.
#
#   Unless the flag --locked is set, the command will not be run when a screen
#   locking program is active. If there is a matching binding with and without
#   --locked, the one with will be preferred when locked and the one without
#   will be preferred when unlocked. If there are matching bindings and one has
#   both --input-device and --locked and the other has neither, the former will
#   be preferred even when unlocked.
#
#   Bindings to keysyms are layout-dependent. This can be changed with the
#   --to-code flag. In this case, the keysyms will be translated into the
#   corresponding keycodes in the first configured layout.
#
#   Mouse bindings operate on the container under the cursor instead of the
#   container that has focus. Mouse buttons can either be specified in the form
#   button[1-9] or by using the name of the event code (ex BTN_LEFT or
#   BTN_RIGHT). For the former option, the buttons will be mapped to their
#   values in X11 (1=left, 2=middle, 3=right, 4=scroll up, 5=scroll down,
#   6=scroll left, 7=scroll right, 8=back, 9=forward). For the latter option,
#   you can find the event names using libinput debug-events.
#
#   The priority for matching bindings is as follows: input device, group, and
#   locked state.
#
#   --whole-window, --border, and --exclude-titlebar are mouse-only options
#   which affect the region in which the mouse bindings can be triggered. By
#   default, mouse bindings are only triggered when over the title bar. With
#   the --border option, the border of the window will be included in this
#   region. With the --whole-window option, the cursor can be anywhere over a
#   window including the title, border, and content. --exclude-titlebar can be
#   used in conjunction with any other option to specify that the titlebar
#   should be excluded from the region of consideration.
#
#   If --whole-window is given, the command can be triggered when the cursor is
#   over an empty workspace. Using a mouse binding over a layer surface's
#   exclusive region is not currently possible.
#
#   Example:
#
#   	# Execute firefox when alt, shift, and f are pressed together
#   	bindsym Mod1+Shift+f exec firefox
#       bindsym [--whole-window] [--border] [--exclude-titlebar] [--release] [--locked] [--to-code] [--input-device=<device>] [--no-warn] [Group<1-4>+]<key combo> <command>


#   is also available for binding with key/button codes instead of key/button names.
#       bindcode [--whole-window] [--border] [--exclude-titlebar] [--release] [--locked] [--input-device=<device>] [--no-warn] [Group<1-4>+]<code> <command>


#   Binds <switch> to execute the sway command command on state changes.
#   Supported switches are lid (laptop lid) and tablet (tablet mode) switches.
#   Valid values for state are on, off and toggle. These switches are on when
#   the device lid is shut and when tablet mode is active respectively. toggle
#   is also supported to run a command both when the switch is toggled on or
#   off.
#
#   Unless the flag --locked is set, the command will not be run when a screen
#   locking program is active. If there is a matching binding with and without
#   --locked, the one with will be preferred when locked and the one without
#   will be preferred when unlocked.
#
#   If the --reload flag is given, the binding will also be executed when the
#   config is reloaded. toggle bindings will not be executed on reload. The
#   --locked flag will operate as normal so if the config is reloaded while
#   locked and --locked is not given, the binding will not be executed.
#
#   By default, if you overwrite a binding, swaynag will give you a warning. To
#   silence this, use the --no-warn flag.
#
#   Example:
#
#   	# Show the virtual keyboard when tablet mode is entered.
#   	bindswitch tablet:on busctl call --user sm.puri.OSK0 /sm/puri/OSK0 sm.puri.OSK0 SetVisible b true
#   	# Log a message when the laptop lid is opened or closed.
#   	bindswitch lid:toggle exec echo "Lid moved"
#       bindswitch [--locked] [--no-warn] [--reload] <switch>:<state> <command>



#   Removes a binding for when <switch> changes to <state>.
#       unbindswitch <switch>:<state>


#   Removes the binding for key combo that was previously bound with the given
#   flags. If input-device is given, only the binding for that input device
#   will be unbound.
#       unbindsym [--whole-window] [--border] [--exclude-titlebar] [--release] [--locked] [--to-code] [--input-device=<device>] <key combo>


#       unbindcode [--whole-window] [--border] [--exclude-titlebar] [--release] [--locked] [input-device=<device>] <code> is also available for unbinding with key/button codes instead of key/button names.




# finding key-codes:
#       1.  to dynamically view key codes
#               $ xev
#
#       2.  alternatively, to (statically) view key codes
#               $ xmodmap -pke
#           OR simply
#               $ xmodmap
# }}}

# GUIDE: modes {{{
#   Switches to the specified mode. The default mode is default.
#       mode <mode>

#   The only valid mode-subcommands... are bindsym, bindcode, bindswitch, and
#   set. If --pango_markup is given, then mode will be interpreted as pango
#   markup.
#       mode [--pango_markup] <mode> <mode-subcommands...>
# }}}

# GUIDE: shell command execution {{{
#   Executes shell command with sh.
exec <shell command>


#   Like exec, but the shell command will be executed again after reload.
exec_always <shell command>




# take a screenshot with grim, the screenshot-tool on Wayland
bindsym $mod+Print \
    exec --no-startup-id grim

# --------------- {{{[bgn] launching mode ---------------
# the launcher-mode is designed to be a quick launcher from quickly accessing
# frequently used applications or commands
set $launch launch_mode

bindsym $mod+r		mode "$launch_mode"

mode "$launch_mode" {
	bindsym f \
        exec fireox; \
        workspace $ws4; \
        mode "default"

	bindsym v \
        exec vivaldi-stable; \
        workspace $ws4; \
        mode "default"

	bindsym l \
        exec vlc; \
        workspace $ws10; \
        mode "default"


    # exit
	bindsym $mod+r \
        mode "default"

	bindsym Escape \
        mode "default"
}
# --------------- launching mode [end]}}} ---------------
# }}}
# }}}



# visual customization {{{
# border {{{

#   Configures the color of window borders and title bars. The first three
#   colors are required. When omitted indicator will use a sane default and
#   child_border will use the color set for background. Colors may be specified
#   in hex, either as #RRGGBB or #RRGGBBAA.
#       client.<class> <border> <background> <text> [<indicator> [<child_border>]]


#   The available classes are:
#   The window that has focus.
#       client.focused

#   The most recently focused view within a container which is not focused.
#       client.focused_inactive

#   Ignored (present for i3 compatibility).
#       client.placeholder

#   A view that does not have focus.
#       client.unfocused

#   A view with an urgency hint. Note: Native Wayland windows do not support
#   urgency. Urgency only works for Xwayland windows.
#       client.urgent


#   The meaning of each color is:
#   The border around the title bar.
#       border
#
#   The background of the title bar.
#       background
#
#   The text color of the title bar.
#       text
#
#   The color used to indicate where a new view will open. In a tiled
#   view would be opened to the right.
#       indicator
#
#   The border around the view itself.
#       child_border


#   The default colors are:
#
#       class	            border	 background	 text	    indicator	child_border
#       background	        n/a	     #ffffff	 n/a	    n/a	        n/a
#       focused	            #4c7899	 #285577     #ffffff	#2e9ef4     #285577
#       focused_inactive	#333333	 #5f676a     #ffffff	#484e50     #5f676a
#       unfocused	        #333333	 #222222     #888888	#292d2e     #222222
#       urgent	            #2f343a	 #900000     #ffffff	#900000     #900000
#       placeholder	        #000000	 #0c0c0c     #ffffff	#000000     #0c0c0c

# the palette {{{
set $active-border              #ede3f7

set $inactive-border            #000000


set $urgent-border              #ff00af

set $active-text                #000000
set $inactive-text              #ede3f7




set $color_black                #000000

set $color_bright_grey          #897397
set $color_dark_grey            #352c37

set $color_pink                                    #ff79c6

set $color_quasi_white          #ede3f7

set $color_test                 #ff0000
# }}}

# coloring {{{
#   title-bar: border
#   title-bar: background
#   title-bar: displayed text
#   border: indicator of next client's positions
#   border: default border

# the focused window of the focused container
client.focused \
    $color_quasi_white \
    $color_black \
    $color_quasi_white \
    $color_pink \
    $color_quasi_white

# any unfocused window of the focused container
client.unfocused \
    $color_black \
    $color_black \
    $color_bright_grey \
    $color_pink \
    $color_black

# The focused window of any unfocused container
client.focused_inactive \
    $color_black \
    $color_black \
    $color_quasi_white \
    $color_pink \
    $color_black

client.urgent \
    $urgent-border \
    $urgent-border \
    $active-text \
    $color_pink \
    $urgent-border
# }}}


# general settings {{{
#   Set default border style for new tiled windows.
#       default_border normal|none|pixel [<n>]
#
# optionally, use this to set the border in general
# for_window [class="^.*"] border pixel 3
default_border none




#   Set default border style for new floating windows. This only applies to
#   windows that are spawned in floating mode, not windows that become floating
#   afterwards.
#       default_floating_border normal|none|pixel [<n>]
#
default_floating_border pixel 3


#   If smart_borders are on, borders will only be enabled if the workspace has
#   more than one visible child. If smart_borders is set to no_gaps, borders
#   will only be enabled if the workspace has more than one visible child and
#   gaps equal to zero.
#       smart_borders on|no_gaps|off
#
# only display borders when multiple windows in ws
# NOTE: borders are NOT displayed under stacking or tabbed layout
#       smart_borders on
#
# no surprises: leave border controls to us
smart_borders off




#   Hides window borders adjacent to the screen edges. Default is none. The
#   --i3 option enables i3-compatible behavior to hide the title bar on tabbed
#   and stacked containers with one child. The smart|smart_no_gaps options are
#   equivalent to setting smart_borders smart|no_gaps and hide_edge_borders
#   none.
#       hide_edge_borders [--i3] none|vertical|horizontal|both|smart|smart_no_gaps
#
# show all borders
hide_edge_borders none
# }}}



# failed experimentation with varying border styles {{{
#       # however, terminals shall have a border
#       for_window \
#           [app_id="Alacritty"] \
#           \
#           border pixel 1


#       # occassionally, might want to make borders visible
#       bindsym \
#           $mod+B \
#           \
#           for_window \
#               [app_id="^.*"] \
#               \
#               border pixel 5
#
#       bindsym \
#           $mod+C \
#           \
#           for_window \
#               [app_id="^.*"] \
#               \
#               border pixel 0
# }}}
# }}}


# titlebar {{{
#   Thickness of the titlebar border in pixels
#       titlebar_border_thickness <thickness>
#
titlebar_border_thickness 1


#   Padding of the text in the titlebar. horizontal value affects horizontal
#   padding of the text while vertical value affects vertical padding (space
#   above and below text). Padding includes titlebar borders so their value
#   should be greater than titlebar_border_thickness. If vertical value is not
#   specified it is set to the horizontal value.
#       titlebar_padding <horizontal> [<vertical>]
#
titlebar_padding 17 1


#   Sets the title alignment. If right is selected and show_marks is set to
#   yes, the marks will be shown on the left side instead of the right side.
#       title_align left|center|right
#
title_align center
# }}}


# gaps {{{
#   Specifies that workspace name should have the given gaps settings when it
#   is created.
#
#   This command does not affect existing workspaces. To alter the gaps of an
#   existing workspace, use the gaps command.
#       workspace <name> gaps inner|outer|horizontal|vertical|top|right|bottom|left <amount>



#   Sets default amount pixels of inner or outer gap, where the inner affects
#   spacing around each view and outer affects the spacing around each
#   workspace. Outer gaps are in addition to inner gaps. To reduce or remove
#   outer gaps, outer gaps can be set to a negative value. outer gaps can also
#   be specified per side with top, right, bottom, and left or per direction
#   with horizontal and vertical.
#
#   This affects new workspaces only, and is used when the workspace doesn't
#   have its own gaps settings (see: workspace <ws> gaps ...).
#       gaps inner|outer|horizontal|vertical|top|right|bottom|left <amount>
#
# distance between all clients and the screen edge, i.e., by how much the
# entire screen is wasted by not displaying anything
#
gaps {
    # top 7
    top 0
    bottom 0

    # horizontal 15
    horizontal 0

}

# capsule wrapped around each window
# this will persist even when only one window exists
#
#       gaps inner 17
gaps inner 0



#   If smart_gaps are on gaps will only be enabled if a workspace has more than
#   one child.
#       smart_gaps on|off
#
# do NOT only allow gaps when multiple windows in one ws, i.e., gaps will
# always be there
smart_gaps off
# }}}



#   Sets font to use for the title bars. To enable support for pango markup,
#   preface the font name with pango:. For example, monospace 10 is the default
#   font. To enable support for pango markup, pango:monospace 10 should be used
#   instead. Regardless of whether pango markup is enabled, font should be
#   specified as a pango font description. For more information on pango font
#   descriptions, see
#   https://developer.gnome.org/pango/stable/pango-Fonts.html#pango-font-description-from-string
#       font [pango:]<font>
#
# used in titlebar, (status)-bar and other sway components
font pango:Shevska W417 Extended 11.5
#
# in Shevska's turbulent times, use this fail-safe
#       font pango:Fira Code Retina 11.0



# Dysfunctional & Deprecated {{{
#   Adjusts the opacity of the window between 0 (completely transparent) and 1
#   (completely opaque). If the operation is omitted, set will be used.
#       opacity [set|plus|minus] <value>
#
# tested to be dysfunctional


#   This command is ignored and is only present for i3 compatibility.
#       client.background <color>
# }}}
# }}}



# actions on containers {{{
# GUIDE: on criteria-matching containers {{{
#   Whenever a window that matches criteria appears, run list of commands. See
#   CRITERIA for more details.
#       for_window <criteria> <command>


#   Assigns views matching criteria (see CRITERIA for details) to workspace.
#   The → (U+2192) is optional and cosmetic. This command is equivalent to:
#       for_window <criteria> move container to workspace <workspace>
#
#       assign <criteria> [→] [workspace] [number] <workspace>


#   Assigns views matching criteria (see CRITERIA for details) to the specified
#   output. The → (U+2192) is optional and cosmetic. This command is equivalent
#   to:
#       for_window <criteria> move container to output <output>
#       assign <criteria> [→] output left|right|up|down|<name>


#   Prevents windows matching <criteria> from being focused automatically when
#   they're created. This has no effect on the first window in a workspace.
#       no_focus <criteria>

# }}}


# on floating containers {{{
#   Specifies the maximum size of floating windows. -1 x -1 removes the upper
#   limit. The default is 0 x 0, which will use the width and height of the
#   entire output layout as the maximums
#       floating_maximum_size <width> x <height>


#   Specifies the minimum size of floating windows. The default is 75 x 50.
#       floating_minimum_size <width> x <height>


#   When the modifier key is held down, you may hold left click to move
#   windows, and right click to resize them. If inverse is specified, left
#   click is used for resizing and right click for moving.
#       floating_modifier <modifier> [normal|inverse]
#
# Use Mouse+$mod to drag floating windows to their wanted position
floating_modifier $mod
# }}}


# weird focus settings {{{
#   If set to yes, moving your mouse over a window will focus that window. If
#   set to always, the window under the cursor will always be focused, even
#   after switching between workspaces.
#       focus_follows_mouse yes|no|always
#
# prevent mouse position from setting the focus (will have to click to focus on
# current container)
focus_follows_mouse no



#   This option determines what to do when an xwayland client requests window
#   activation. If set to urgent, the urgent state will be set for that window.
#   If set to focus, the window will become focused. If set to smart, the
#   window will become focused only if it is already visible, otherwise the
#   urgent state will be set. Default is smart.
#       focus_on_window_activation smart|urgent|focus|none
#
#
# If the window requesting focus is on an active workspace, it will receive the focus.
# Otherwise, the urgency hint will be set.
#       focus_on_window_activation smart
#
# always switch to the new window even if on an inactive workspace, since
# cross-workspace switching is cheap
focus_on_window_activation focus


#   This option determines what to do when attempting to focus over the edge of
#   a container. If set to no, the focused container will retain focus, if
#   there are no other containers in the direction. If set to yes, focus will
#   be wrapped to the opposite edge of the container, if there are no other
#   containers in the direction. If set to force, focus will be wrapped to the
#   opposite edge of the container, even if there are other containers in the
#   direction. If set to workspace, focus will wrap like in the yes case and
#   additionally wrap when moving outside of workspaces boundaries. Default is
#   yes.
#       focus_wrapping yes|no|force|workspace
#
# no: do not wrap, ever
focus_wrapping no



#   If output is specified, the mouse will be moved to new outputs as you move
#   focus between them. If container is specified, the mouse will be moved to
#   the middle of the container on switch. Default is output.
#       mouse_warping output|container|none
# }}}


# marks {{{
#   Marks are arbitrary labels that can be used to identify certain windows and
#   then jump to them at a later time. Each identifier can only be set on a
#   single window at a time since they act as a unique identifier. By default,
#   mark sets identifier as the only mark on a window. --add will instead add
#   identifier to the list of current marks for that window. If --toggle is
#   specified mark will remove identifier if it is already marked.
#       mark --add|--replace [--toggle] <identifier>



#   If show_marks is yes, marks will be displayed in the window borders. Any
#   mark that starts with an underscore will not be drawn even if show_marks is
#   yes. The default is yes.
#       show_marks yes|no



#   unmark will remove identifier from the list of current marks on a window.
#   If identifier is omitted, all marks are removed.
#       unmark [<identifier>]
# }}}


#   Kills (closes) the currently focused container and all of its children.
#       kill
#
bindsym {
    # a tribute to Windows
    $mod_alt+F4 kill

    $mod+q kill
}

# }}}




# navigation {{{
# cross-workspace navigation {{{
#   Switches to the specified workspace. The string "number" is optional and is
#   used to sort workspaces.
#       workspace [--no-auto-back-and-forth] [number] <name>


#   Switches to the next workspace on the current output or on the next output
#   if currently on the last workspace.
#       workspace prev|next


#   Switches to the next workspace on the current output.
#       workspace prev_on_output|next_on_output



#   Switches to the previously focused workspace.
#       workspace back_and_forth


#   When yes, repeating a workspace switch command will switch back to the
#   prior workspace. For example, if you are currently on workspace 1, switch
#   to workspace 2, then invoke the "workspace 2" command again, you will be
#   returned to workspace 1. Default is no.
#       workspace_auto_back_and_forth yes|no
#
workspace_auto_back_and_forth no



# --------------- {{{[bgn] cross-workspace navigation ---------------
set {
    $ws0 "ws0"
    $ws1 "ws1"
    $ws2 "ws2"
    $ws3 "ws3"
    $ws4 "ws4"
    $ws5 "ws5"
    $ws6 "ws6"
    $ws7 "ws7"
    $ws8 "ws8"
    $ws9 "ws9"
}


# switch to workspace
bindsym {
    $mod+1 workspace $ws0
    $mod+2 workspace $ws1
    $mod+3 workspace $ws2
    $mod+4 workspace $ws3
    $mod+5 workspace $ws4
    $mod+6 workspace $ws5
    $mod+7 workspace $ws6
    $mod+8 workspace $ws7
    $mod+9 workspace $ws8
    $mod+0 workspace $ws9
}


# quick switch to the last active workspace
bindsym $mod+Tab workspace back_and_forth
# --------------- cross-workspace navigation [end]}}} ---------------
# }}}


# cross-output navigation {{{
#   Specifies that workspace name should be shown on the specified outputs.
#   Multiple outputs can be listed and the first available will be used. If the
#   workspace gets placed on an output further down the list and an output that
#   is higher on the list becomes available, the workspace will be moved to the
#   higher priority output.
#
#   This command does not affect existing workspaces. To move an existing
#   workspace, use the move command in combination with the workspace criteria
#   (non-empty workspaces only) or workspace command (to switch to the
#   workspace before moving).
#       workspace <name> output <outputs...>
# }}}
# }}}



# output and display {{{
#   output subcommands {{{
#   For details on output subcommands, see sway-output(5).
#
#   * may be used in lieu of a specific output name to configure all outputs. A
#   list of output names may be obtained via swaymsg -t get_outputs.
#       output <output_name> <output-subcommands...>
#
#
# <output_name> specifies the target output device of the <output-subcommands>.
# A list of output devices can be obtained with:
#       $ swaymsg -t get_outputs
#
# <output-subcommands> are commands specifically targeted at manipulating the
# output of sway. These commands are found under COMMANDS of sway-output(5)



# Manual (multi-)monitor config {{{
#   NOTE:
#   this is much naturally configured with front-ends such as:
#   ->  $ wdisplays
#   nevertheless, manual config might still be necessary.

# Typically, two major steps are required for configuring displays:
#   1.  configure display specific settings, e.g.:
#       ->  size, refresh-rate, rotation
#   2.  set positions of the displays, where the following layout-based
#   naming-scheme of displays is used:
#       |-----------------------------|-------|
#       |  disp(0, 0)  |  disp(1, 0)  |  ...  |
#       |-----------------------------|-------|
#       |  disp(0, 1)  |  disp(1, 1)  |  ...  |
#       |-----------------------------|-------|
#       |     ....     |     ....     |  ...  |
#       |-----------------------------|-------|

# single-monitor {{{
output eDP-1 {
    mode "1920x1080"
    position 0 0
}
# }}}

# multi-monitor {{{
#   1.  display-specific settings {{{
#   NOTE:
#   find info of all displays with:
#   ->  $ swaymsg -t get_outputs

output eDP-1 {
    mode "1920x1080"
}
output HDMI-A-2 {
    mode "2560x1440@59.951Hz"
}
output DP-1 {
    mode "1920x1080@60Hz"
    #transform 180
}
# }}}

#   2.  positioning {{{
set $disp-0-0 eDP-1
set $disp-1-0 HDMI-A-2
#set $disp-1-0 DP-1

output {
    $disp-0-0 \
        position 0 0
    $disp-1-0 \
        position 1920 0
}
# }}}
# }}}
# }}}


# Apart from using |output <...> <some_subcommand>| in keybinds, it may also be
# used in shell with swaymsg.
# E.g., using swaymsg to directly to disable an output (blank the screen)
#       $ swaymsg output eDP-1 toggle
#
# following the train of thought of activating and deactivating the output
# device(s), now as a keybind:
#   <output-subcommands> is:
#         enable/disable/toggle
#
# temporarily switch off the screen
bindsym --locked {
    $mod+Home \
        output * dpms on
    $mod+End \
        output * dpms off
}



# setting the background picture {{{
#   <output-subcommands> is:
#         background

output * background {
    # void-like {{{
    # solid colors {{{
    #       # default background to the unknown of unadulterated darkness
    #       #000000 solid_color

    #       # a mysterious haze of blue tint so subtle that one would ponder its existence
    #       #211B25 solid_color
    # }}}

    # alternatives {{{
    #       # a tribute to BlackBerry as the pioneer of push notification
    ./wallpapers/BBM.png fill #777777
    # }}}

    # selection from Application |Frame| {{{
    #       # a city's coastline at night
    #       ./wallpapers/Night_Skyline.jpg fill #777777
    # }}}
    # }}}


    # vividness {{{
    # OSX {{{
    #       # Default wallpaper of Leopard (10.5), Server Edition
    #       ./wallpapers/Leopard_Server.jpg fill #777777
    # }}}

    # selection from Application |backdrop| {{{
    #       # deep blue and crimson mountainlines fading to darkness
    #       ./wallpapers/Crimson_Glow.png fill #777777

    #       # Nordic arctic lights
    #       ./wallpapers/Northern_Lights.png fill #777777

    #       # a sea of cyan on void shore
    #       ./wallpapers/Blue_Splatter.png fill #777777
    # }}}
    # }}}
}
# }}}



# explicitly switch off graphic card specific syncing
#   <output-subcommands> is:
#         adaptive_sync off
#
#       output * adaptive_sync off
#   }}}


#   Determines what to do when a fullscreen view opens a dialog. If smart (the
#   default), the dialog will be displayed. If ignore, the dialog will not be
#   rendered. If leave_fullscreen, the view will exit fullscreen mode and the
#   dialog will be rendered.
#       popup_during_fullscreen smart|ignore|leave_fullscreen
#
popup_during_fullscreen leave_fullscreen



#   Using enable or disable manually sets or unsets the window's urgent state.
#   Using allow or deny controls the window's ability to set itself as urgent.
#   By default, windows are allowed to set their own urgency.
#       urgent enable|disable|allow|deny
# }}}



# input and seat {{{

# m14t {{{
set $m14t_pen 11551:21068:Wacom_Co.,Ltd._Pen_and_multitouch_sensor_Stylus
input $m14t_pen {
    #events enabled
    events disabled
    #map_to_output $disp-0-0
}

set $m14t_touchscreen 11551:21068:Wacom_Co.,Ltd._Pen_and_multitouch_sensor
input $m14t_touchscreen {
    #events enabled
    events disabled
    #map_to_output $disp-0-0
}

# currently unidentified object
set $m14t_misc 11551:21068:Wacom_Co.,Ltd._Pen_and_multitouch_sensor_UNKNOWN
input $m14t_misc {
    #events enabled
    events disabled
    #map_to_output $disp-0-0
}
# }}}

# Intuos Pro {{{
# wired {{{
set $wacom_touch "1386:914:Wacom_Intuos_Pro_S_Finger"
input $wacom_touch {
    events enabled
    #       tap enabled
    #       tap_button_map lrm

    #       accel_profile adaptive
    #       pointer_accel 0.0
    # non-default
    natural_scroll enabled
}

set $wacom_pen "1386:914:Wacom_Intuos_Pro_S_Pen"
input $wacom_pen {
    events enabled
    #       accel_profile adaptive
    #       pointer_accel 0.0
    map_to_output HDMI-A-2
}

set $wacom_pad "1386:914:Wacom_Intuos_Pro_S_Pad"
input $wacom_pad {
    events enabled
}
# }}}

# bt {{{
set $wacom_touch_bt "1386:915:Wacom_Intuos_Pro_S_Finger"
input $wacom_touch_bt {
    events enabled
    # non-default
    natural_scroll enabled
}

set $wacom_pen_bt "1386:915:Wacom_Intuos_Pro_S_Pen"
input $wacom_pen_bt {
    events enabled
    map_to_output $disp-1-0
}

set $wacom_pad_bt "1386:915:Wacom_Intuos_Pro_S_Pad"
input $wacom_pad_bt {
    events enabled
}
# }}}
# }}}

# input {{{
#   For details on input subcommands, see sway-input(5).
#
#   * may be used in lieu of a specific device name to configure all input
#   devices. A list of input device names may be obtained via swaymsg -t
#   get_inputs.
#       input <input_device> <input-subcommands...>
#
#
#
# to determine the identifier for input devices, run:
# $ swaymsg -t get_inputs


# --------------- {{{[beg] touchpad settings ---------------
# configuration options of touchpad found under:
#       LIBINPUT CONFIGURATION
# of sway-input(5)



# constantly typing the identifiers is cumbersome, in come the following shorthands:
set $touchpad 2:7:SynPS/2_Synaptics_TouchPad



# enable natural scrolling
input $touchpad natural_scroll enabled

# scroll with two fingers
input $touchpad scroll_method two_finger

# Specifies which button mapping to use for tapping.
# lrm treats 1 finger as left click, 2 fingers as right click, and 3 fingers as middle click.
# lmr treats 1 finger as left click, 2 fingers as middle click, and 3 fingers as right click.
input $touchpad tap_button_map lrm

# Enables or disables tap for specified input device.
input $touchpad tap enabled

# Enables or disables disable-while-typing for the specified input device.
input $touchpad dwt enabled

# Sets the pointer acceleration profile for the specified input device.
input $touchpad accel_profile adaptive
# --------------- touchpad settings [end]}}} ---------------


# trackpoint settings {{{
set $trackpoint 2:10:TPPS/2_IBM_TrackPoint

# choose "flat" instead of "adaptive" for unadulterated precision
#   NOTE: detailed reference under:
# https://wayland.freedesktop.org/libinput/doc/latest/pointer-acceleration.html
input $trackpoint accel_profile flat

# final step towards fully linearized response
input $trackpoint pointer_accel 1.0
# }}}


# keyboard settings {{{
set $keyboard_main "1:1:AT_Translated_Set_2_keyboard"

input $keyboard_main {
    xkb_layout us,ch(fr),ru(phonetic)

    # do NOT CapsLock and NumLock on startup
    xkb_capslock disabled
    xkb_numlock disabled

    # xkeyboard-specific settings {{{
    # NOTE:
    #   1.  from |$ man 7 xkeyboard-config|
    #   2.  must all be given in ONE single |xkb_options| command as a
    #   comma-separted list

    # gist:
    #   1.  |CapsLock|:
    #       a.  swap |CapsLock| and |Esc|
    #           ->  caps:swapescape
    #       b.  make |CapsLock| an extra |Esc|, essentially removing |CapsLock|
    #           ->  caps:caps:escape
    #   2.  use |Windows|+|Space| to change layout
    #   ->  grp:win_space_toggle
    #   3.  |<| and |>| becomes a |shift|
    #   ->  lv2:lsgt_switch
    xkb_options \
        caps:escape,grp:win_space_toggle,lv2:lsgt_switch
    # }}}
}
# }}}


# --------------- {{{[bgn] keyboard-layout setting mode ---------------
# configuration options of touchpad found under:
#       KEYBOARD CONFIGURATION
# of sway-input(5)



# a much easier to type alias for the keyboard identifier
set $laptop_keyboard 1:1:AT_Translated_Set_2_keyboard



# set mode name
set $layout_mode layout_mode

bindsym $mod+v      mode "$layout_mode"

mode "$layout_mode" {
# further layout options available at;
# # https://jlk.fjfi.cvut.cz/arch/manpages/man/xkeyboard-config.7.en
    bindsym e \
        input $laptop_keyboard xkb_layout us; \
        mode "default"

	bindsym c \
        input $laptop_keyboard xkb_layout ch; mode "default"

	bindsym d \
        input $laptop_keyboard xkb_layout de; mode "default"

	bindsym f \
        input $laptop_keyboard xkb_layout fr; mode "default"

    # exit
	bindsym $mod+space \
        mode "default"
	bindsym Escape \
        mode "default"
}
# --------------- keyboard-layout setting mode [end]}}} ---------------
# }}}




# seat {{{
#   For details on seat subcommands, see sway-input(5).
#       seat <seat> <seat-subcommands...>

# seat settings {{{
# configuration options of touchpad found under:
#       SEAT CONFIGURATION
# of sway-input(5)



# autohide the cursor's image after |timeout| milliseconds without activity,
# automatically rounded up to integral multiples 100 milliseconds
seat * hide_cursor 3700

# set the theme and size for xcursor
# capitaine cursor{{{
# we prefer the bright version for better contrast
seat * xcursor_theme capitaine-cursors-light 24

#       # the dark variant
#       seat * xcursor_theme capitaine-cursors 24
# }}}

# }}}
# }}}
# }}}



# dragging in tiling mode {{{
#   Sets whether or not tiling containers can be dragged with the mouse. If
#   enabled (default), the floating_mod can be used to drag tiling, as well as
#   floating, containers. Using the left mouse button on title bars without the
#   floating_mod will also allow the container to be dragged. toggle should not
#   be used in the config file.
#       tiling_drag enable|disable|toggle
#
tiling_drag disable



#   Sets the threshold that must be exceeded for a container to be dragged by
#   its titlebar. This has no effect if floating_mod is used or if tiling_drag
#   is set to disable. Once the threshold has been exceeded once, the drag
#   starts and the cursor can come back inside the threshold without stopping
#   the drag. threshold is multiplied by the scale of the output that the
#   cursor on. The default is 9.
#       tiling_drag_threshold <threshold>
# }}}

# vim: foldmethod=marker
