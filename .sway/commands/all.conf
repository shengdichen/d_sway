# used with |bindings| or |$ swaymsg|, NOT directly in configuration file
# think of these as commands that work are applied to the sway socket



#   A no operation command that can be used to override default behaviour. The
#   optional comment argument is ignored, but logged for debugging purposes.
#       nop <comment>



# controlling sway as a whole {{{
#   Exit sway and end your Wayland session.
#       exit


#   Reloads the sway config file and applies any changes.
#       reload
# }}}



# visual customization {{{
# border {{{
#   Set border style for focused window. normal includes a border of thickness
#   n and a title bar. pixel is a border without title bar n pixels thick.
#   Default is normal with border thickness 2. csd is short for
#   client-side-decorations, which allows the client to draw its own
#   decorations.
#       border none|normal|csd|pixel [<n>]


#   Cycles through the available border styles.
#       border toggle
# }}}


# gaps {{{
#   Changes the inner or outer gaps for either all workspaces or the current
#   workspace. outer gaps can be altered per side with top, right, bottom, and
#   left or per direction with horizontal and vertical.
#       gaps inner|outer|horizontal|vertical|top|right|bottom|left all|current set|plus|minus <amount>
# }}}


# title-bar {{{
#   Sets the format of window titles. The following placeholders may be used:
#   %title - The title supplied by the window
#   %app_id - The wayland app ID (applicable to wayland windows only)
#   %class - The X11 classname (applicable to xwayland windows only)
#   %instance - The X11 instance (applicable to xwayland windows only)
#   %shell - The protocol the window is using (typically xwayland or
#   xdg_shell)
#
#   This command is typically used with for_window criteria. For example:
#       for_window [title="."] title_format "<b>%title</b> (%app_id)"
#
#   Note that markup requires pango to be enabled via the font command.
#
#   The default format is "%title".
#       title_format <format>
# }}}
# }}}



# viewing options {{{
#   Makes focused view fullscreen, non-fullscreen, or the opposite of what it
#   is now. If no argument is given, it does the same as toggle. If global is
#   specified, the view will be fullscreen across all outputs.
#       fullscreen [enable|disable|toggle] [global]


# setting focus {{{
# --------------- {{{[bgn] inner-workspace navigation ---------------
#   Moves focus to the container that matches the specified criteria.
#       <criteria> focus


#   Moves focus to the next container in the specified direction.
#       focus up|right|down|left


#   Moves focus to the previous or next container in the current layout. By
#   default, the last active child of the newly focused container will be
#   focused. The sibling option indicates not to immediately focus a child of
#   the container.
#       focus prev|next [sibling]


#   Moves focus to the last-focused child of the focused container.
#       focus child


#   Moves focus to the parent of the focused container.
#       focus parent
bindsym {
    $mod+comma \
        fullscreen disable; \
        focus parent

    $mod+period \
        fullscreen disable; \
        focus child
}



# quick switch {{{
# if indeed a non-fullscreen scenario is required, create ad-hoc usage:
bindsym $mod+shift+grave fullscreen toggle
#   bindsym $mod+F11 fullscreen toggle
#   bindsym $mod+f fullscreen toggle


# navigate through panes
bindsym $mod+h \
    fullscreen disable; \
    focus left; \
    fullscreen enable

bindsym $mod+j \
    fullscreen disable; \
    focus down; \
    fullscreen enable

bindsym $mod+k \
    fullscreen disable; \
    focus up; \
    fullscreen enable

bindsym $mod+l \
    fullscreen disable; \
    focus right; \
    fullscreen enable
# }}}


# navigation mode {{{
set $nav_mode Navigation

# entering nav_mode {{{
# toggle fullscreen mode for the focused container
bindsym $mod+grave \
    fullscreen disable; mode "$nav_mode"

bindsym $mod+grave+h \
    fullscreen disable; focus left; mode "$nav_mode"

bindsym $mod+grave+j \
    fullscreen disable; focus down; mode "$nav_mode"

bindsym $mod+grave+k \
    fullscreen disable; focus up; mode "$nav_mode"

bindsym $mod+grave+l \
    fullscreen disable; focus right; mode "$nav_mode"
# }}}


mode "$nav_mode" {
    # quick switching {{{
    bindsym h \
        focus left; fullscreen enable; mode "default"

    bindsym j \
        focus down; fullscreen enable; mode "default"

    bindsym k \
        focus up; fullscreen enable; mode "default"

    bindsym l \
        focus right; fullscreen enable; mode "default"
    # }}}


    # extended switching {{{
    bindsym $mod+grave+h \
        focus left

	bindsym $mod+grave+j \
        focus down

	bindsym $mod+grave+k \
        focus up

	bindsym $mod+grave+l \
        focus right
    # }}}


    # to stay in non-fullscreen mode
    bindsym grave \
        mode "default"

	bindsym Return \
        mode "default"; fullscreen enable

	bindsym $mod+grave \
        mode "default"; fullscreen enable

	bindsym Escape \
        mode "default"; fullscreen enable
}

# }}}


# focus on parent container
# bindsym $mod+grave+Prior focus parent ;; fullscreen enable
# bindsym $mod+Prior focus parent

# focus on child container
# bindsym $mod+grave+Next focus child ;; fullscreen enable
# bindsym $mod+Next focus child



# --------------- inner-workspace navigation [end]}}} ---------------



# cross-output navigation {{{
#   Moves focus to the next output in the specified direction.
#       focus output up|right|down|left
bindsym {
    $mod+Right \
        focus output right

    $mod+Up \
        focus output up

    $mod+Left \
        focus output left

    $mod+Down \
        focus output down
}


#   Moves focus to the named output.
#       focus output <name>
# }}}



#   Sets focus to the last focused tiling container.
#       focus tiling


#   Sets focus to the last focused floating container.
#       focus floating


#   Moves focus between the floating and tiled layers.
#       focus mode_toggle
#
# quickly change focus between a tiling and a floating window
#       bindsym $mod+space focus mode_toggle
# }}}


# floating {{{
#   Make focused view floating, non-floating, or the opposite of what it is
#   now.
#       floating enable|disable|toggle
#
# toggle tiling / floating on current client
bindsym $mod+Shift+space floating toggle



#   "Sticks" a floating window to the current output so that it shows up on all
#   workspaces.
#       sticky enable|disable|toggle
# }}}


#   Shows a window from the scratchpad. Repeatedly using this command will
#   cycle through the windows in the scratchpad.
#       scratchpad show


#   Set/unset an idle inhibitor for the view. focus will inhibit idle when the
#   view is focused by any seat. fullscreen will inhibit idle when the view is
#   fullscreen (or a descendant of a fullscreen container) and is visible. open
#   will inhibit idle until the view is closed (or the inhibitor is
#   unset/changed).  visible will inhibit idle when the view is visible on any
#   output. none will remove any existing idle inhibitor for the view.
#
#   This can also be used with criteria to set an idle inhibitor for any
#   existing view or with for_window to set idle inhibitors for future views.
#       inhibit_idle focus|fullscreen|open|none|visible


#   Works together with output max_render_time to reduce the latency even
#   further by delaying the frame callbacks sent to a surface. When set to a
#   positive number of milliseconds, delays the frame callback in such a way
#   that the surface has the specified number of milliseconds to render and
#   commit new contents before being sampled by the compositor for the next
#   presentation. See max_render_time in sway-output(5) for further details.
#
#   To set this up for optimal latency:
#
#   1.  Set up output max_render_time.
#   2.  Put the target application in full-screen and have it continuously render
#       something.
#   3.  Start by setting max_render_time 1. If the application drops frames,
#       increment by 1.
#
#       max_render_time off|<msec>
# }}}



# modifications {{{
#   Rename either <old_name> or the focused workspace to the <new_name>
#       rename workspace [<old_name>] to <new_name>


# resizing {{{
#   Resizes the currently focused container by amount, specified in pixels or
#   percentage points. If the units are omitted, floating containers are
#   resized in px and tiled containers by ppt. amount will default to 10 if
#   omitted.
#       resize shrink|grow width|height [<amount> [px|ppt]]


#   Sets the height of the container to height, specified in pixels or
#   percentage points. If the units are omitted, floating containers are
#   resized in px and tiled containers by ppt. If height is 0, the container
#   will not be resized.
#       resize set height <height> [px|ppt]



#   Sets the width of the container to width, specified in pixels or percentage
#   points. If the units are omitted, floating containers are resized in px and
#   tiled containers by ppt. If width is 0, the container will not be resized.
#       resize set [width] <width> [px|ppt]


#   Sets the width and height of the container to width and height, specified
#   in pixels or percentage points. If the units are omitted, floating
#   containers are resized in px and tiled containers by ppt. If width or
#   height is 0, the container will not be resized on that axis.
#       resize set [width] <width> [px|ppt] [height] <height> [px|ppt]



# --------------- {{{[beg] resize-mode ---------------
# set shortcut for entering resize mode (note: this keymap is not for exiting)
bindsym $mod+shift+d mode "resize"

mode "resize" {
	# change current window's size
	bindsym h resize shrink width 10 px or 10 ppt
	bindsym j resize grow height 10 px or 10 ppt
	bindsym k resize shrink height 10 px or 10 ppt
	bindsym l resize grow width 10 px or 10 ppt

	# modify gaps
	bindsym $mod+Left			gaps outer current plus 5
	bindsym $mod+Right			gaps outer current minus 5

	bindsym $mod+Up				gaps inner current plus 5
	bindsym $mod+Down			gaps inner current minus 5

	# exit
	bindsym $mod+shift+d mode "default"
	bindsym Escape				mode "default"
}
# --------------- resize-mode [end]}}} ---------------
# }}}



# displacement {{{
# --------------- {{{[bgn] inner-workspace displacement ---------------
#   Moves the focused container in the direction specified. If the container,
#   the optional px argument specifies how many pixels to move the container.
#   If unspecified, the default is 10 pixels. Pixels are ignored when moving
#   tiled containers.
#       move left|right|up|down [<px> px]


#   Moves the focused container to the specified position in the workspace. If
#   absolute is used, the position is relative to all outputs.
#       move [absolute] position <pos_x> [px] <pos_y> [px]


#   Moves the focused container to be centered on the workspace. If absolute is
#   used, it is moved to the center of all outputs.
#       move [absolute] position center


#   Moves the focused container to be centered on the cursor.
#       move position cursor|mouse|pointer




# displace focused window
bindsym $mod+Shift+h move left
bindsym $mod+Shift+j move down
bindsym $mod+Shift+k move up
bindsym $mod+Shift+l move right

#--------------- inner-workspace displacement [end]}}} ---------------



# --------------- {{{[beg] cross-workspace displacement ---------------
#   Moves the focused container to the specified workspace. The string "number"
#   is optional and is used to match a workspace with the same number, even if
#   it has a different name.
#       move [--no-auto-back-and-forth] [container|window] [to] workspace [number] <name>


#   Moves the focused container to the previous, next or current workspace on
#   this output, or if no workspaces remain, the previous or next output.
#       move [container|window] [to] workspace prev|next|current


#   Moves the focused container to the previous or next workspace on this
#   output, wrapping around if already at the first or last workspace.
#       move [container|window] [to] workspace prev_on_output|next_on_output


#   Moves the focused container to previously focused workspace.
#       move [container|window] [to] workspace back_and_forth



# move focused container to a specific workspace
bindsym {
    $mod+Shift+1 move container to workspace $ws0
    $mod+Shift+2 move container to workspace $ws1
    $mod+Shift+3 move container to workspace $ws2
    $mod+Shift+4 move container to workspace $ws3
    $mod+Shift+5 move container to workspace $ws4
    $mod+Shift+6 move container to workspace $ws5
    $mod+Shift+7 move container to workspace $ws6
    $mod+Shift+8 move container to workspace $ws7
    $mod+Shift+9 move container to workspace $ws8
    $mod+Shift+0 move container to workspace $ws9
}
# --------------- cross-workspace displacement [end]}}} ---------------



# cross-output displacement {{{
#   Moves the focused container to the specified output.
#       move [container|window] [to] output <name-or-id>|current


#   Moves the focused container to next output in the specified direction.
#       move [container|window] [to] output up|right|down|left



#   Moves the focused workspace to the specified output.
#       move workspace [to] output <name-or-id>|current


#   Moves the focused workspace to the specified output.
#       move workspace to [output] <name-or-id>|current


#   Moves the focused workspace to next output in the specified direction.
#       move workspace [to] output up|right|down|left


#   Moves the focused workspace to next output in the specified direction.
#       move workspace to [output] up|right|down|left
bindsym {
    $mod+Shift+Right \
        move workspace to output right

    $mod+Shift+Up \
        move workspace to output up

    $mod+Shift+Left \
        move workspace to output left

    $mod+Shift+Down \
        move workspace to output down
}



#   Moves the focused container to the scratchpad.
#       move [container|window] [to] scratchpad


#   Moves the focused container to the specified mark.
#       move [container|window] [to] mark <mark>
# }}}
# }}}



# splitting and layout-setting {{{
# splitting {{{
#   Splits the current container, vertically or horizontally. When toggle is
#   specified, the current container is split opposite to the parent
#   container's layout.
#       split vertical|v|horizontal|h|toggle|t


#   Equivalent to split horizontal
#       splith


#   Equivalent to split vertical
#       splitv


#   Equivalent to split toggle
#       splitt



# if the split orientation is being set, a new split creation is probably
# looming, restoring the fullscreen state therefore makes little sense
# next split in horizontal orientation
bindsym $mod+minus \
    fullscreen disable; \
    split horizontal

#|  bindsym --release $mod+minus fullscreen enable

# next split in vertical orientation
bindsym $mod+backslash \
    fullscreen disable; \
    split vertical
# }}}


# setting the layout {{{
#   Sets the layout mode of the focused container.
#       layout default|splith|splitv|stacking|tabbed



#   Cycles the layout mode of the focused container though a preset list of
#   layouts. If no argument is given, then it cycles through stacking, tabbed
#   and the last split layout. If "split" is given, then it cycles through
#   splith and splitv. If "all" is given, then it cycles through every layout.
#       layout toggle [split|all]
#
# the default keybind for toggling between splith and splitv
#       bindsym $mod+e layout toggle split



#   Cycles the layout mode of the focused container through a list of layouts.
#       layout toggle [split|tabbed|stacking|splitv|splith] [split|tabbed|stacking|splitv|splith]...
#
# change layout for containers between stacked, tabbed and toggle split
bindsym {
    $mod+slash \
        layout toggle tabbed stacking
    $mod+question \
        layout toggle splith splitv
}

# }}}
# }}}




#   Swaps the position, geometry, and fullscreen status of two containers. The
#   first container can be selected either by criteria or focus. The second
#   container can be selected by id, con_id, or mark. id can only be used with
#   xwayland views. If the first container has focus, it will retain focus unless
#   it is moved to a different workspace or the second container becomes fullscreen
#   on the same workspace as the first container. In either of those cases, the
#   second container will gain focus.
#       swap container with id|con_id|mark <arg>
# }}}

# vim: foldmethod=marker
