# used with |bindings| or |$ swaymsg|, NOT directly in configuration file
# think of these as commands that work are applied to the sway socket



#   A no operation command that can be used to override default behaviour. The
#   optional comment argument is ignored, but logged for debugging purposes.
#       nop <comment>



# controlling sway as a whole {{{
#   Exit sway and end your Wayland session.
#       exit


#   Reloads the sway config file and applies any changes.
#       reload
# }}}



# visual customization {{{
include ~/.sway/commands/visual/border.conf

include ~/.sway/commands/visual/gaps.conf

include ~/.sway/commands/visual/titlebar.conf
# }}}



# viewing options {{{
include ~/.sway/commands/viewing/misc.conf

include ~/.sway/commands/viewing/focus.conf

include ~/.sway/commands/viewing/floating.conf

include ~/.sway/commands/viewing/scratchpad.conf
# }}}



# modifications {{{
#   Rename either <old_name> or the focused workspace to the <new_name>
#       rename workspace [<old_name>] to <new_name>


# resizing {{{
#   Resizes the currently focused container by amount, specified in pixels or
#   percentage points. If the units are omitted, floating containers are
#   resized in px and tiled containers by ppt. amount will default to 10 if
#   omitted.
#       resize shrink|grow width|height [<amount> [px|ppt]]


#   Sets the height of the container to height, specified in pixels or
#   percentage points. If the units are omitted, floating containers are
#   resized in px and tiled containers by ppt. If height is 0, the container
#   will not be resized.
#       resize set height <height> [px|ppt]



#   Sets the width of the container to width, specified in pixels or percentage
#   points. If the units are omitted, floating containers are resized in px and
#   tiled containers by ppt. If width is 0, the container will not be resized.
#       resize set [width] <width> [px|ppt]


#   Sets the width and height of the container to width and height, specified
#   in pixels or percentage points. If the units are omitted, floating
#   containers are resized in px and tiled containers by ppt. If width or
#   height is 0, the container will not be resized on that axis.
#       resize set [width] <width> [px|ppt] [height] <height> [px|ppt]



# --------------- {{{[beg] resize-mode ---------------
# set shortcut for entering resize mode (note: this keymap is not for exiting)
bindsym $mod+shift+d mode "resize"

mode "resize" {
	# change current window's size
	bindsym h resize shrink width 10 px or 10 ppt
	bindsym j resize grow height 10 px or 10 ppt
	bindsym k resize shrink height 10 px or 10 ppt
	bindsym l resize grow width 10 px or 10 ppt

	# modify gaps
	bindsym $mod+Left			gaps outer current plus 5
	bindsym $mod+Right			gaps outer current minus 5

	bindsym $mod+Up				gaps inner current plus 5
	bindsym $mod+Down			gaps inner current minus 5

	# exit
	bindsym $mod+shift+d mode "default"
	bindsym Escape				mode "default"
}
# --------------- resize-mode [end]}}} ---------------
# }}}



# displacement {{{
# --------------- {{{[bgn] inner-workspace displacement ---------------
#   Moves the focused container in the direction specified. If the container,
#   the optional px argument specifies how many pixels to move the container.
#   If unspecified, the default is 10 pixels. Pixels are ignored when moving
#   tiled containers.
#       move left|right|up|down [<px> px]


#   Moves the focused container to the specified position in the workspace. If
#   absolute is used, the position is relative to all outputs.
#       move [absolute] position <pos_x> [px] <pos_y> [px]


#   Moves the focused container to be centered on the workspace. If absolute is
#   used, it is moved to the center of all outputs.
#       move [absolute] position center


#   Moves the focused container to be centered on the cursor.
#       move position cursor|mouse|pointer




# displace focused window
bindsym $mod+Shift+h move left
bindsym $mod+Shift+j move down
bindsym $mod+Shift+k move up
bindsym $mod+Shift+l move right

#--------------- inner-workspace displacement [end]}}} ---------------



# --------------- {{{[beg] cross-workspace displacement ---------------
#   Moves the focused container to the specified workspace. The string "number"
#   is optional and is used to match a workspace with the same number, even if
#   it has a different name.
#       move [--no-auto-back-and-forth] [container|window] [to] workspace [number] <name>


#   Moves the focused container to the previous, next or current workspace on
#   this output, or if no workspaces remain, the previous or next output.
#       move [container|window] [to] workspace prev|next|current


#   Moves the focused container to the previous or next workspace on this
#   output, wrapping around if already at the first or last workspace.
#       move [container|window] [to] workspace prev_on_output|next_on_output


#   Moves the focused container to previously focused workspace.
#       move [container|window] [to] workspace back_and_forth



# move focused container to a specific workspace
bindsym {
    $mod+Shift+1 move container to workspace $ws0
    $mod+Shift+2 move container to workspace $ws1
    $mod+Shift+3 move container to workspace $ws2
    $mod+Shift+4 move container to workspace $ws3
    $mod+Shift+5 move container to workspace $ws4
    $mod+Shift+6 move container to workspace $ws5
    $mod+Shift+7 move container to workspace $ws6
    $mod+Shift+8 move container to workspace $ws7
    $mod+Shift+9 move container to workspace $ws8
    $mod+Shift+0 move container to workspace $ws9
}
# --------------- cross-workspace displacement [end]}}} ---------------



# cross-output displacement {{{
#   Moves the focused container to the specified output.
#       move [container|window] [to] output <name-or-id>|current


#   Moves the focused container to next output in the specified direction.
#       move [container|window] [to] output up|right|down|left



#   Moves the focused workspace to the specified output.
#       move workspace [to] output <name-or-id>|current


#   Moves the focused workspace to the specified output.
#       move workspace to [output] <name-or-id>|current


#   Moves the focused workspace to next output in the specified direction.
#       move workspace [to] output up|right|down|left


#   Moves the focused workspace to next output in the specified direction.
#       move workspace to [output] up|right|down|left
bindsym {
    $mod+Shift+Right \
        move workspace to output right

    $mod+Shift+Up \
        move workspace to output up

    $mod+Shift+Left \
        move workspace to output left

    $mod+Shift+Down \
        move workspace to output down
}



#   Moves the focused container to the scratchpad.
#       move [container|window] [to] scratchpad


#   Moves the focused container to the specified mark.
#       move [container|window] [to] mark <mark>
# }}}
# }}}



# splitting and layout-setting {{{
# splitting {{{
#   Splits the current container, vertically or horizontally. When toggle is
#   specified, the current container is split opposite to the parent
#   container's layout.
#       split vertical|v|horizontal|h|toggle|t


#   Equivalent to split horizontal
#       splith


#   Equivalent to split vertical
#       splitv


#   Equivalent to split toggle
#       splitt



# if the split orientation is being set, a new split creation is probably
# looming, restoring the fullscreen state therefore makes little sense
# next split in horizontal orientation
bindsym $mod+minus \
    fullscreen disable; \
    split horizontal

#|  bindsym --release $mod+minus fullscreen enable

# next split in vertical orientation
bindsym $mod+backslash \
    fullscreen disable; \
    split vertical
# }}}


# setting the layout {{{
#   Sets the layout mode of the focused container.
#       layout default|splith|splitv|stacking|tabbed



#   Cycles the layout mode of the focused container though a preset list of
#   layouts. If no argument is given, then it cycles through stacking, tabbed
#   and the last split layout. If "split" is given, then it cycles through
#   splith and splitv. If "all" is given, then it cycles through every layout.
#       layout toggle [split|all]
#
# the default keybind for toggling between splith and splitv
#       bindsym $mod+e layout toggle split



#   Cycles the layout mode of the focused container through a list of layouts.
#       layout toggle [split|tabbed|stacking|splitv|splith] [split|tabbed|stacking|splitv|splith]...
#
# change layout for containers between stacked, tabbed and toggle split
bindsym {
    $mod+slash \
        layout toggle tabbed stacking
    $mod+question \
        layout toggle splith splitv
}

# }}}
# }}}




#   Swaps the position, geometry, and fullscreen status of two containers. The
#   first container can be selected either by criteria or focus. The second
#   container can be selected by id, con_id, or mark. id can only be used with
#   xwayland views. If the first container has focus, it will retain focus unless
#   it is moved to a different workspace or the second container becomes fullscreen
#   on the same workspace as the first container. In either of those cases, the
#   second container will gain focus.
#       swap container with id|con_id|mark <arg>
# }}}

# vim: foldmethod=marker
